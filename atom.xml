<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bright-eyed</title>
  
  <subtitle>and bushy-tailed</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-12T01:14:29.116Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Taewoo Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zappa로 장고프로젝트 배포하기</title>
    <link href="http://yoursite.com/2018/01/10/zappa%EB%A1%9C-%EC%9E%A5%EA%B3%A0%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0/"/>
    <id>http://yoursite.com/2018/01/10/zappa로-장고프로젝트-배포하기/</id>
    <published>2018-01-10T08:23:28.000Z</published>
    <updated>2018-01-12T01:14:29.116Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Zappa"><a href="#Zappa" class="headerlink" title="Zappa"></a>Zappa</h2><p><a href="https://github.com/Miserlou/Zappa" target="_blank" rel="noopener">zappa</a>는 AWS Lambda와 API Gateway로 구성된 환경에 웹 어플리케이션(Flask, Django)을 배포해주는 파이썬 패키지입니다. 람다와 게이트웨이 조합을 이용하기 때문에 웹 어플리케이션을 실행하기 위한 물리적인 서버가 필요하지 않으며 스케일링, 로드 밸런싱 등 웹 어플리케이션의 운영에 대한 관리는 AWS가 자동으로 처리하기 때문에 웹 어플리케이션 개발에 좀 더 많은 시간을 투자할 수 있습니다.</p><h2 id="설치-및-기본-설정"><a href="#설치-및-기본-설정" class="headerlink" title="설치 및 기본 설정"></a>설치 및 기본 설정</h2><p>자파를 이용해 어플리케이션을 AWS(Lambda와 API Gateway)에 배포하려면 AWS 인증 정보가 필요합니다. 추후에 자파를 실행할 경우 <code>~/.aws/credentials</code> 파일을 참조하기 때문에 우선 이 파일을 생성해줘야 합니다. <code>credentials</code> 파일의 내용은 다음과 같습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zappa-user]                          # IAM user</span><br><span class="line">aws_access_key_id = id here           # access key</span><br><span class="line">aws_secret_access_key = secret here   # secret</span><br></pre></td></tr></table></figure></p><blockquote><p>위와 같이 파일을 생성하기 위한 내용은 <a href="https://console.aws.amazon.com/iam/home#/users" target="_blank" rel="noopener">여기</a>에서 찾을 수 있습니다. 사용자 생성을 클릭하고 생성할 사용자 이름을 입력한 다음에 프로그래밍 방식 액세스 유형에 체크하고 <strong>AmazonS3FullAccess, AdministratorAccess, AmazonAPIGatewayAdministrator, AmazonRoute53FullAccess 권한을 추가</strong>하여 사용자를 생성하면 아이디와 시크릿을 웹 상에서 확인하거나 csv 파일로 다운로드 받을 수 있습니다.</p></blockquote><p>자파는 <code>pip</code>를 이용하여 설치할 수 있습니다. 가상환경을 활성화하고 설치를 진행합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv venv-zappa</span><br><span class="line">...(중략)</span><br><span class="line"></span><br><span class="line">$ source venv-zappa/bin/activate</span><br><span class="line">(venv-zappa) $ pip install zappa</span><br></pre></td></tr></table></figure></p><p>설치가 완료되면 배포할 장고 프로젝트 폴더에서 <code>zappa init</code> 명령어를 통해서 초기 설정을 진행합니다.</p><p><code>zappa init</code> 명령어를 수행하면 다음과 같은 작업을 수행합니다.</p><ol><li>배포할 어플리케이션의 버전 이름(dev, production 등)을 지정</li><li>AWS 계정 정보 확인 (<code>credentials</code> 파일 확인)</li><li>소스코드를 저장하기 위한 S3 버킷 선택(또는 생성)</li><li>배포할 웹 어플리케이션의 설정파일 지정(장고 프로젝트의 <code>settings.py</code> 파일)</li><li>API 공개 여부(public 또는 private)를 설정</li></ol><p>설정을 마치면 최종적으로 <code>zappa_setting.json</code> 파일에 저장되는 내용을 확인합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(venv-zappa) [user@~/zappa-test]$ zappa init</span><br><span class="line">...(중략)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;dev&quot;: &#123;</span><br><span class="line">        &quot;aws_region&quot;: null,</span><br><span class="line">        &quot;django_settings&quot;: &quot;zappa_test.settings&quot;,</span><br><span class="line">        &quot;profile_name&quot;: &quot;zappa-user&quot;,</span><br><span class="line">        &quot;project_name&quot;: &quot;zappa-test&quot;,</span><br><span class="line">        &quot;runtime&quot;: &quot;python3.6&quot;,</span><br><span class="line">        &quot;s3_bucket&quot;: &quot;bucket_for_zappa&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Does this look okay? (default &apos;y&apos;) [y/n]:</span><br></pre></td></tr></table></figure></p><p>설정파일은 위와 같은 내용을 담고 있습니다. 내용을 확인하고 설정을 마무리하면 장고 프로젝트 폴더에 <code>zappa_setting.json</code> 파일이 생성됩니다. 마지막으로 <code>zappa_setting.json</code> 파일의 <code>“aws_region”</code>키의 <code>null</code> 값을 배포하려는 리전 값으로 변경(서울은 <code>“ap-northeast-2”</code>)하여 배포를 위한 자파 설정을 마무리합니다.</p><h2 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h2><p>장고 프로젝트를 배포하기 전에 간단한 <code>View</code>를 만들어 보겠습니다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestView</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Response(data=<span class="string">'Hello! Django Zappa'</span>, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p><code>app</code>을 하나 생성하고 <code>views.py</code> 파일에 간단한 <code>ClassBasedView</code> 하나를 작성했습니다. 경로는 <code>hello/</code>로 지정하고 실행한 결과는 다음과 같습니다.</p><p><img src="/images/local_test.png" alt="로컬 테스트"></p><p><code>hello/</code> 경로로 접속했을 때 메시지가 정상적으로 출력되는 것을 확인 할 수 있습니다.</p><p>이제 <code>zappa deploy</code> 명령어를 이용하여 장고 프로젝트를 배포합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(venv-zappa) $ zappa deploy</span><br><span class="line">Calling deploy for stage dev..</span><br><span class="line"></span><br><span class="line">...(중략)</span><br><span class="line">Deploying API Gateway..</span><br><span class="line">Deployment complete!: https://abcd1qwer2.execute-api.ap-northeast-2.amazonaws.com/dev</span><br></pre></td></tr></table></figure></p><p>배포가 완료되면 URL 하나가 출력됩니다. 이 URL는 API Gateway에서 생성된 도메인과 <code>zappa init</code> 명령어 진행 시 가장 처음에 설정한 어플리케이션의 버전 이름으로 구성된 URL입니다. 해당 URL로 접속합니다.</p><p><img src="/images/zappa_test_root.png" alt="root"></p><p>이 URL은 배포한 어플리케이션의 루트에 해당합니다. 루트에 지정한 <code>path</code>가 없기 때문에 404 에러 메시지가 출력됐습니다. <code>hello/</code> 경로로 접근해봅니다. </p><p><img src="/images/zappa_test_hello.png" alt="hello"></p><p>로컬 환경에서 테스트한 결과와 동일한 화면을 확인 할 수 있습니다.</p><blockquote><p>장고 설정파일의 <code>DEBUG</code> 항목을 <code>False</code> 로 세팅을 하면, <code>ALLOWED_HOSTS</code> 항목에 호스트를 추가해야 합니다. 따라서, 자파로 어플리케이션을 배포 후 출력되는 URL의 호스트를 복사하여 <code>ALLOWED_HOSTS</code> 항목에 추가한 후 <code>zappa update</code> 명령어를 이용하여 어플리케이션을 업데이트를 진행합니다. </p></blockquote><p>또한 <code>zappa_setting.json</code> 파일에 버전별 설정을 추가하여 여러 버전의 어플리케이션을 배포할 수 있으며(dev 버전, production 버전 등), <code>zappa tail</code> 명령어를 이용하여 발생한 오류를 실시간으로 확인할 수도 있습니다. 자세한 내용은 <a href="https://github.com/Miserlou/Zappa" target="_blank" rel="noopener">자파 깃허브 레포지토리</a>에서 확인 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;Zappa&quot;&gt;&lt;a href=&quot;#Zappa&quot; class=&quot;headerlink&quot; title=&quot;Zappa&quot;&gt;&lt;/a&gt;Zappa&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Miserlou/Zappa&quot; target=&quot;_
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>mysqlclient 설치 오류 (openssl 관련) 해결</title>
    <link href="http://yoursite.com/2018/01/01/django/mysqlclient-%EC%84%A4%EC%B9%98-%EC%98%A4%EB%A5%98/"/>
    <id>http://yoursite.com/2018/01/01/django/mysqlclient-설치-오류/</id>
    <published>2018-01-01T07:41:48.000Z</published>
    <updated>2018-01-01T08:37:53.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="발생한-오류"><a href="#발생한-오류" class="headerlink" title="발생한 오류"></a>발생한 오류</h2><p>장고와 MySQL의 연동을 위해서 <code>mysqlclient</code> 모듈을 설치하려고 했다. 하지만 오류가 발생했고, 오류 내용은 다음과 같다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...(중략)</span><br><span class="line">  ld: library not found for -lssl</span><br><span class="line">  clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">  error: command &apos;/usr/bin/clang&apos; failed with exit status 1</span><br></pre></td></tr></table></figure></p><h2 id="다양한-원인"><a href="#다양한-원인" class="headerlink" title="다양한 원인"></a>다양한 원인</h2><p>일단 해당 모듈의 저장소를 살펴본 바로는 홈브루(<code>brew</code>)를 통해서 설치한 <code>mysql-connector-c</code> 라이브러리 때문에 발생한 <a href="https://github.com/PyMySQL/mysqlclient-python#note-about-bug-of-mysql-connectorc-on-macos" target="_blank" rel="noopener">버그</a>라고 한다. 하지만 저장소에 나와있는 내용을 따라 <code>mysql_config</code> 파일을 확인해보니 변경 후의 내용과 동일했다.</p><p>그래서 이슈 목록에서 검색을 해보니 SSL 설정과 관련된 오류라고 한다. (<a href="https://github.com/PyMySQL/mysqlclient-python/issues/131" target="_blank" rel="noopener">링크</a>)</p><p>해결 방법으로는 여러가지(<code>openssl</code> 재설치, <a href="https://github.com/PyMySQL/mysqlclient-python/issues/131#issuecomment-268546951" target="_blank" rel="noopener">xcode 명령어 도구 설치</a> 등)가 있었는데, 내가 오류를 해결한 방법은 다음과 같다.</p><h2 id="라이브러리-경로-명시하기"><a href="#라이브러리-경로-명시하기" class="headerlink" title="라이브러리 경로 명시하기"></a>라이브러리 경로 명시하기</h2><p>문제는 openssl 라이브러리가 제대로 링크되지 않아 발생한 문제였다. <code>brew info openssl</code>을 수행하면 다음과 같은 내용을 확인할 수 있었다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">... (중략)</span><br><span class="line">because Apple has deprecated use of OpenSSL in favor of its own TLS and crypto libraries.</span><br><span class="line"></span><br><span class="line">If you need to have this software first in your PATH run:</span><br><span class="line">  echo &apos;export PATH=&quot;/usr/local/opt/openssl/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">For compilers to find this software you may need to set:</span><br><span class="line">    LDFLAGS:  -L/usr/local/opt/openssl/lib</span><br><span class="line">    CPPFLAGS: -I/usr/local/opt/openssl/include</span><br></pre></td></tr></table></figure></p><p>애플 정책상 <code>openssl</code> 라이브러리는 <code>deprecated</code> 되었기 때문에 컴파일러를 위해 플래그를 이용하여 <code>openssl</code> 라이브러리 경로를 명시해서 수행하면 된다. 정상적인 <code>mysqlclient</code> 설치를 위한 명령어는 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LDFLAGS=-L/usr/local/opt/openssl/lib pip install mysqlclient</span><br></pre></td></tr></table></figure><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>위 명령어를 통해서 정상적으로 <code>mysqlclient</code> 모듈을 설치하고 마이그레이션까지 수행할 수 있엇다.</p><p>간단할 줄만 알았던 해결 과정이 정말 많은 내용을 담고 있었다. 전에는 겪지 못한 오류라 다양하게 검색해봤지만 결과는 해당 모듈 깃허브 저장소에서 찾을 수 있었다. 역시, 해답은 멀리 있지 않다는 것을 다시 한 번 알 수 있는 경험이었다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;발생한-오류&quot;&gt;&lt;a href=&quot;#발생한-오류&quot; class=&quot;headerlink&quot; title=&quot;발생한 오류&quot;&gt;&lt;/a&gt;발생한 오류&lt;/h2&gt;&lt;p&gt;장고와 MySQL의 연동을 위해서 &lt;code&gt;mysqlclient&lt;/code&gt; 모듈을 설치하려고 
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>git push 권한 오류</title>
    <link href="http://yoursite.com/2017/12/21/etc/git-push-%EA%B6%8C%ED%95%9C-%EC%98%A4%EB%A5%98/"/>
    <id>http://yoursite.com/2017/12/21/etc/git-push-권한-오류/</id>
    <published>2017-12-21T01:26:11.000Z</published>
    <updated>2017-12-21T02:17:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="원격-저장소와-다른-유저"><a href="#원격-저장소와-다른-유저" class="headerlink" title="원격 저장소와 다른 유저"></a>원격 저장소와 다른 유저</h2><p><code>hexo deploy</code> 명령어를 입력하여 블로그를 깃허브에 배포하려 했으나 오류가 발생했다. 오류 내용은 다음과 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: Permission to [remote repository] denied to [User].</span><br></pre></td></tr></table></figure><p>원격 저장소에 대해서 유저의 권한이 없다고 한다. 그래서 블로그 설정파일인 <code>_config.yml</code> 파일의 <code>deploy</code> 항목에 해당 원격 저장소에 권한이 있는 이름과 이메일을 추가하고 다시 배포를 수행했지만 여전히 같은 오류가 발생했다.</p><p>그 다음으로 <code>git config --global</code> 명령어를 통해서 이름과 이메일을 변경하고 배포를 시도했으나 여전히 오류가 발생했다.</p><h2 id="뿌리를-뽑자"><a href="#뿌리를-뽑자" class="headerlink" title="뿌리를 뽑자"></a>뿌리를 뽑자</h2><p>이 쯤 되니 맥북에 저장되어 있는 깃 관련 정보를 제거하고 싶었다. 그래서 구글링을 해봤다.</p><p>스포트라이트를 이용해서 키체인 접근(또는 keychain access)이라고 검색하면 앱 하나가 나온다. 이를 실행하면 맥북에 저장되어 있는 암호나 인증서들이 주욱 나온다.</p><p>여기서 <code>github.com</code> 항목을 찾아서 삭제하고 다시 <code>hexo deploy</code> 명령어를 수행하면 깃허브 사용자 이름과 비밀번호를 입력하는 과정이 추가된다. 계정정보를 알맞게 입력하니 오류가 발생하지 않고 정상적으로 배포가 됐다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;원격-저장소와-다른-유저&quot;&gt;&lt;a href=&quot;#원격-저장소와-다른-유저&quot; class=&quot;headerlink&quot; title=&quot;원격 저장소와 다른 유저&quot;&gt;&lt;/a&gt;원격 저장소와 다른 유저&lt;/h2&gt;&lt;p&gt;&lt;code&gt;hexo deploy&lt;/code&gt; 명
      
    
    </summary>
    
      <category term="etc" scheme="http://yoursite.com/categories/etc/"/>
    
    
      <category term="etc" scheme="http://yoursite.com/tags/etc/"/>
    
  </entry>
  
  <entry>
    <title>django 2.0 출시</title>
    <link href="http://yoursite.com/2017/12/20/django/django-2-0-%EC%B6%9C%EC%8B%9C/"/>
    <id>http://yoursite.com/2017/12/20/django/django-2-0-출시/</id>
    <published>2017-12-20T07:44:39.000Z</published>
    <updated>2017-12-21T01:26:41.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="새로운-시작화면"><a href="#새로운-시작화면" class="headerlink" title="새로운 시작화면"></a>새로운 시작화면</h2><p>장고 2.0 버전이 출시 되었다. 새로운 장고를 설치하고  <code>runserver</code> 를 수행하면 다음과 같은 화면을 확인 할 수 있다.</p><p><img src="https://user-images.githubusercontent.com/14994581/34148017-0f49c85a-e4e3-11e7-8562-08678830225f.png" alt="screenshot-2017-12-19 django the web framework for perfectionists with deadlines"></p><blockquote><p>화면 가운데에 있는 로켓 이미지는 움직이기도 한다!</p></blockquote><h2 id="간단해진-URL-문법"><a href="#간단해진-URL-문법" class="headerlink" title="간단해진 URL 문법"></a>간단해진 URL 문법</h2><p>2.0 <a href="https://docs.djangoproject.com/ko/2.0/releases/2.0/" target="_blank" rel="noopener">릴리즈 노트</a>를 주욱 둘러봤다. 새로운 내용들 중에서 가장 눈에 띄는 내용은 간단해진 URL 문법이다. 이전의 버전에서는 다음과 같이 작성해야했다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^v1/programs/(?P&lt;pid&gt;d+)/$&apos;,SomeClassBasedView.as_view())</span><br></pre></td></tr></table></figure><p>2.0에서는 다음과 같이 작성한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(r&apos;^v1/programs/&lt;int:pid&gt;/&apos;, SomeClassBasedView.as_view())</span><br></pre></td></tr></table></figure><p>정규 표현식 대신 타입을 사용하여 URL 인자의 유형을 강제(<code>coercion</code>)로 변환시킨다. 위 예제를 살펴보면 2.0 이전의 버전에서는 pid가 문자열 타입이지만 2.0 버전에서는 정수 타입이 된다. 그리고 URL의 끝을 의미하는 <code>$</code> 특수문자를 그대로 인식하기 때문에 해당 문자를 빼고 URL을 작성해야 한다.</p><p>또한 약간의 모듈 변경으로 인해<br><code>django.conf.urls.url()</code> 대신 <code>django.urls.path()</code>를 이용하여 작성해야 한다.</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>이 외에도 어드민(<code>admin/</code>) 사이트가 반응형으로 변경되어 모바일 디바이스에서도 자연스러운 화면을 확인할 수 있으며, 서드 파티 라이브러리 제작자에게 이전 버전에 대한 지원을 중단할 것을 제안하는(!) 등 많은 내용들이 있다. 자세한 내용은 <a href="https://docs.djangoproject.com/en/2.0/releases/2.0/" target="_blank" rel="noopener">여기</a>서 확인할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;새로운-시작화면&quot;&gt;&lt;a href=&quot;#새로운-시작화면&quot; class=&quot;headerlink&quot; title=&quot;새로운 시작화면&quot;&gt;&lt;/a&gt;새로운 시작화면&lt;/h2&gt;&lt;p&gt;장고 2.0 버전이 출시 되었다. 새로운 장고를 설치하고  &lt;code&gt;runserv
      
    
    </summary>
    
      <category term="django" scheme="http://yoursite.com/categories/django/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/19/hello-world/"/>
    <id>http://yoursite.com/2017/12/19/hello-world/</id>
    <published>2017-12-19T06:50:09.894Z</published>
    <updated>2017-12-19T06:50:09.894Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
